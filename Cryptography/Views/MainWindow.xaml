<Window x:Class="Cryptography.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Cryptography"
        xmlns:rule="clr-namespace:Cryptography.ValidationRules"
        xmlns:converters="clr-namespace:Cryptography.Converters"
        mc:Ignorable="d"
        Title="Cryptography" Height="565.069" Width="505.566"
        Icon="Resources/if_file_locked_66769.png">
    <Window.Resources>
        <converters:RadioButtonToIntConverter x:Key="RadioButtonToIntConverter" />
    </Window.Resources>

    <Grid>

        <Label x:Name="labelChooseUser" Content="Wybierz użytkownika:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10,12,0,0" Width="145" Padding="5,0"/>
        <ListBox x:Name="listBoxUsers" HorizontalAlignment="Left" Height="229" Margin="10,30,0,0" VerticalAlignment="Top" Width="187" ItemsSource="{Binding Users, Mode=TwoWay}" Style="{StaticResource SelectionModeListBox}">

            <ListBox.ItemContainerStyle>
                <Style TargetType="{x:Type ListBoxItem}">
                    <Setter Property="IsSelected" Value="{Binding Mode=TwoWay, Path=IsSelected}"/>
                </Style>
            </ListBox.ItemContainerStyle>
            <ListBox.ItemTemplate>
                <DataTemplate>
                    <TextBlock Text="{Binding Login}"/>
                </DataTemplate>
            </ListBox.ItemTemplate>
        </ListBox>
        <Grid Margin="202,30,0,0" Height="107" VerticalAlignment="Top" HorizontalAlignment="Left" Width="145">
            <TextBox x:Name="textBoxLogin" Height="23" Margin="27,28,0,0" TextWrapping="Wrap" VerticalAlignment="Top" HorizontalAlignment="Left" Width="118" Style="{StaticResource textBoxError}" >
                <Binding Path="Login" UpdateSourceTrigger="PropertyChanged">
                    <Binding.ValidationRules>
                        <rule:TextValidation ValidatesOnTargetUpdated="True" ValidationStep="RawProposedValue" />
                    </Binding.ValidationRules>
                </Binding>
            </TextBox>
            <TextBox x:Name="textBoxPassword" Height="23" Margin="27,56,0,0" TextWrapping="Wrap" VerticalAlignment="Top" HorizontalAlignment="Left" Width="118"  Style="{StaticResource textBoxError}">
                <Binding Path="Password" UpdateSourceTrigger="PropertyChanged">
                    <Binding.ValidationRules>
                        <rule:TextValidation ValidatesOnTargetUpdated="True" ValidationStep="RawProposedValue" />
                    </Binding.ValidationRules>
                </Binding>
            </TextBox>

            <Button x:Name="buttonAddUser" Content="Dodaj" Margin="0,84,0,-3" VerticalAlignment="Top" Height="23" HorizontalAlignment="Left" Width="75">
                <Button.Template>
                    <ControlTemplate TargetType="{x:Type ButtonBase}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                            <Grid>
                                <Image x:Name="if_user_add_66907_png" Source="Resources/if_user_add_66907.png" Stretch="Fill" Margin="0,0,50,0" />
                                <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="Right" Margin="0,2,10,3" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="Button.IsDefaulted" Value="True">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" TargetName="border" Value="#FFBEE6FD"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="#FF3C7FB1"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" TargetName="border" Value="#FFC4E5F6"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="#FF2C628B"/>
                            </Trigger>
                            <Trigger Property="ToggleButton.IsChecked" Value="True">
                                <Setter Property="Background" TargetName="border" Value="#FFBCDDEE"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="#FF245A83"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Background" TargetName="border" Value="#FFF4F4F4"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="#FFADB2B5"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="#FF838383"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Button.Template>
                <Button.Style>
                    <Style TargetType="Button">
                        <Setter Property="IsEnabled" Value="false" />
                        <Style.Triggers>
                            <MultiDataTrigger>
                                <Setter Property="IsEnabled" Value="true" />
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding ElementName=textBoxLogin, Path=(Validation.HasError)}" Value="false" />
                                    <Condition Binding="{Binding ElementName=textBoxPassword, Path=(Validation.HasError)}" Value="false" />
                                </MultiDataTrigger.Conditions>
                            </MultiDataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
            </Button>
            <Button x:Name="buttonDeleteUser" Content="Usuń" VerticalAlignment="Top" Height="23" HorizontalAlignment="Left" Width="75" Margin="0,0,0,0" Click="buttonDeleteUser_Click">
                <Button.Template>
                    <ControlTemplate TargetType="{x:Type ButtonBase}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                            <Grid>
                                <Image x:Name="if_user_add_66907_png" Source="Resources/if_user_deny_66909.png" Stretch="Fill" Margin="0,0,50,0" />
                                <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="Right" Margin="0,2,13,3" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="Button.IsDefaulted" Value="True">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" TargetName="border" Value="#FFBEE6FD"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="#FF3C7FB1"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" TargetName="border" Value="#FFC4E5F6"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="#FF2C628B"/>
                            </Trigger>
                            <Trigger Property="ToggleButton.IsChecked" Value="True">
                                <Setter Property="Background" TargetName="border" Value="#FFBCDDEE"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="#FF245A83"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Background" TargetName="border" Value="#FFF4F4F4"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="#FFADB2B5"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="#FF838383"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Button.Template>
            </Button>
            <Image x:Name="imageUser" Margin="0,28,122,0" Source="Resources/if_user_66919.png" Stretch="Fill" Height="23" VerticalAlignment="Top"/>
            <Image x:Name="imageKey" Margin="0,56,0,0" Source="Resources/if_key_66817.png" Stretch="Fill" HorizontalAlignment="Left" Width="23" Height="23" VerticalAlignment="Top"/>

        </Grid>


        <Grid Margin="202,142,0,0" Height="117" VerticalAlignment="Top" HorizontalAlignment="Left" Width="268">
            <RadioButton x:Name="radioButtonEncrypt" Content="Szyfrowanie" HorizontalAlignment="Left" VerticalAlignment="Top" Height="52" Width="159" VerticalContentAlignment="Center" Margin="0,10,0,0" 
                         GroupName="ApplicationMode" IsChecked="{Binding ApplicationMode, Converter={StaticResource RadioButtonToIntConverter}, ConverterParameter=1}">
                <RadioButton.Template>
                    <ControlTemplate TargetType="{x:Type RadioButton}">
                        <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Border x:Name="radioButtonBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1,1,2,1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <Grid x:Name="markGrid" Margin="2">


                                    <Image x:Name="optionMark" Source="Resources/if_lock_locked_66818.png" Stretch="Fill"/>
                                </Grid>
                            </Border>
                            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="1" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="HasContent" Value="True">
                                <Setter Property="FocusVisualStyle">
                                    <Setter.Value>
                                        <Style>
                                            <Setter Property="Control.Template">
                                                <Setter.Value>
                                                    <ControlTemplate>
                                                        <Rectangle Margin="14,0,0,0" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="Padding" Value="4,-1,0,0"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" TargetName="radioButtonBorder" Value="#FFF3F9FF"/>
                                <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="#FF5593FF"/>
                                <!--<Setter Property="Fill" TargetName="optionMark" Value="#FF212121"/>-->
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Background" TargetName="radioButtonBorder" Value="#FFE6E6E6"/>
                                <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="#FFBCBCBC"/>
                                <!--<Setter Property="Fill" TargetName="optionMark" Value="#FF707070"/>-->
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" TargetName="radioButtonBorder" Value="#FFD9ECFF"/>
                                <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="#FF3C77DD"/>
                                <!--<Setter Property="Fill" TargetName="optionMark" Value="#FF212121"/>-->
                            </Trigger>
                            <Trigger Property="IsChecked" Value="True">

                                <Setter Property="BorderThickness" TargetName="radioButtonBorder" Value="3"/>
                                <Setter Property="Opacity" TargetName="optionMark" Value="1"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="{x:Null}">
                                <Setter Property="Opacity" TargetName="optionMark" Value="0.56"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </RadioButton.Template>
            </RadioButton>
            <RadioButton x:Name="radioButtonDecrypt" Content="Deszyfrowanie" HorizontalAlignment="Left" VerticalAlignment="Top" Height="52" Width="159" VerticalContentAlignment="Center" Margin="0,65,0,0"
                         GroupName="ApplicationMode" IsChecked="{Binding ApplicationMode, Converter={StaticResource RadioButtonToIntConverter}, ConverterParameter=2}">
                <RadioButton.Template>
                    <ControlTemplate TargetType="{x:Type RadioButton}">
                        <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Border x:Name="radioButtonBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1,1,2,1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <Grid x:Name="markGrid" Margin="2">


                                    <Image x:Name="optionMark" Source="Resources/if_lock_unlocked_66819.png" Stretch="Fill"/>
                                </Grid>
                            </Border>
                            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="1" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="HasContent" Value="True">
                                <Setter Property="FocusVisualStyle">
                                    <Setter.Value>
                                        <Style>
                                            <Setter Property="Control.Template">
                                                <Setter.Value>
                                                    <ControlTemplate>
                                                        <Rectangle Margin="14,0,0,0" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="Padding" Value="4,-1,0,0"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" TargetName="radioButtonBorder" Value="#FFF3F9FF"/>
                                <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="#FF5593FF"/>
                                <!--<Setter Property="Fill" TargetName="optionMark" Value="#FF212121"/>-->
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Background" TargetName="radioButtonBorder" Value="#FFE6E6E6"/>
                                <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="#FFBCBCBC"/>
                                <!--<Setter Property="Fill" TargetName="optionMark" Value="#FF707070"/>-->
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" TargetName="radioButtonBorder" Value="#FFD9ECFF"/>
                                <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="#FF3C77DD"/>
                                <!--<Setter Property="Fill" TargetName="optionMark" Value="#FF212121"/>-->
                            </Trigger>
                            <Trigger Property="IsChecked" Value="True">

                                <Setter Property="BorderThickness" TargetName="radioButtonBorder" Value="3"/>
                                <Setter Property="Opacity" TargetName="optionMark" Value="1"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="{x:Null}">
                                <Setter Property="Opacity" TargetName="optionMark" Value="0.56"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </RadioButton.Template>
            </RadioButton>

            <GroupBox x:Name="groupBox" Header="Tryb pracy szyfru" HorizontalAlignment="Left" VerticalAlignment="Top" Height="107" Width="109" Margin="159,10,0,0" Style="{StaticResource ResourceKey=HideGroupBox}">


                <Grid HorizontalAlignment="Left" VerticalAlignment="Top">
                    <RadioButton x:Name="radioButtonECB" Content="ECB" HorizontalAlignment="Left" Margin="10,10,0,0" VerticalAlignment="Top"
                                 GroupName="CryptBlockMode" IsChecked="{Binding CryptBlockMode, Converter={StaticResource RadioButtonToIntConverter}, ConverterParameter=1}"/>
                    <RadioButton x:Name="radioButtonCBC" Content="CBC" HorizontalAlignment="Left" Margin="10,30,0,0" VerticalAlignment="Top"
                                 GroupName="CryptBlockMode" IsChecked="{Binding CryptBlockMode, Converter={StaticResource RadioButtonToIntConverter}, ConverterParameter=2}"/>
                    <RadioButton x:Name="radioButtonCFB" Content="CFB" HorizontalAlignment="Left" Margin="10,50,0,0" VerticalAlignment="Top"
                                 GroupName="CryptBlockMode" IsChecked="{Binding CryptBlockMode, Converter={StaticResource RadioButtonToIntConverter}, ConverterParameter=3}"/>
                    <RadioButton x:Name="radioButtonOFB" Content="OFB" HorizontalAlignment="Left" Margin="10,70,0,0" VerticalAlignment="Top"
                                 GroupName="CryptBlockMode" IsChecked="{Binding CryptBlockMode, Converter={StaticResource RadioButtonToIntConverter}, ConverterParameter=4}"/>
                </Grid>


            </GroupBox>
        </Grid>
        <Grid Margin="6,277,0,0" HorizontalAlignment="Left" Width="478" Height="134" VerticalAlignment="Top">
            <Label x:Name="labelSourceFile" Content="Wybierz plik źródłowy:" HorizontalAlignment="Left" VerticalAlignment="Top" Padding="5,0"/>
            <TextBox x:Name="textBoxSourceFile" HorizontalAlignment="Left" Height="23" TextWrapping="Wrap" VerticalAlignment="Top" Width="292" Margin="0,18,0,0"  Style="{StaticResource textBoxError}" IsHitTestVisible="True" IsReadOnly="True">
                <Binding Path="SourceFile" UpdateSourceTrigger="PropertyChanged">
                    <Binding.ValidationRules>
                        <rule:TextValidation ValidatesOnTargetUpdated="True" ValidationStep="RawProposedValue" />
                    </Binding.ValidationRules>
                </Binding>
            </TextBox>
            <Button x:Name="buttonBrowseSourceFile" Content="Przeglądaj..." HorizontalAlignment="Left" Margin="297,18,0,0" VerticalAlignment="Top" Width="86" Height="23" Click="buttonBrowseSourceFile_Click"/>
            <Label x:Name="labelFileSize" Content="{Binding FileSize}" HorizontalAlignment="Left" Margin="388,15,0,0" VerticalAlignment="Top" Width="90"/>
            <Label x:Name="labelDestinationFolder" Content="Wybierz folder docelowy:" HorizontalAlignment="Left" Margin="0,46,0,0" VerticalAlignment="Top" Padding="5,0"/>
            <TextBox x:Name="textBoxDestinationFolder" HorizontalAlignment="Left" Height="23" Margin="0,64,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="292"  Style="{StaticResource textBoxError}" IsReadOnly="True">
                <Binding Path="DestinationFolder" UpdateSourceTrigger="PropertyChanged">
                    <Binding.ValidationRules>
                        <rule:TextValidation ValidatesOnTargetUpdated="True" ValidationStep="RawProposedValue" />
                    </Binding.ValidationRules>
                </Binding>
            </TextBox>
            <Button x:Name="buttonBrowseDestinationFolder" Content="Przeglądaj..." HorizontalAlignment="Left" Margin="297,64,0,0" VerticalAlignment="Top" Width="86" Height="23" Click="buttonBrowseDestinationFolder_Click"/>
            <Label x:Name="labelOutputFilename" Content="Wpisz nazwę pliku wyjściowego:" HorizontalAlignment="Left" Margin="0,92,0,0" VerticalAlignment="Top" Padding="5,0"/>
            <TextBox x:Name="textBoxOutputFilename" HorizontalAlignment="Left" Height="24" Margin="0,110,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="292"  Style="{StaticResource textBoxErrorEncrypt}">
                <Binding Path="OutputFilename" UpdateSourceTrigger="PropertyChanged">
                    <Binding.ValidationRules>
                        <rule:TextValidation ValidatesOnTargetUpdated="True" ValidationStep="RawProposedValue"/>
                    </Binding.ValidationRules>
                </Binding>
            </TextBox>

        </Grid>
        <Button x:Name="buttonStart" Content="Start" Margin="208,426,0,0" Height="23" VerticalAlignment="Top" HorizontalAlignment="Left" Width="75">
            <Button.Template>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <Grid>
                            <Image x:Name="if_user_add_66907_png" Source="Resources\if_arrow_right_66681.png" Stretch="Fill" Margin="0,0,50,0" />
                            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="Right" Margin="0,2,15,3" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="#FFBEE6FD"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="#FF3C7FB1"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border" Value="#FFC4E5F6"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="#FF2C628B"/>
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter Property="Background" TargetName="border" Value="#FFBCDDEE"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="#FF245A83"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="#FFF4F4F4"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="#FFADB2B5"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="#FF838383"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Button.Template>
            <Button.Style>
                <Style TargetType="Button">
                    <Setter Property="IsEnabled" Value="true" />
                    <Style.Triggers>
                        <MultiDataTrigger>
                        <Setter Property="IsEnabled" Value="false" />
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding ElementName=textBoxSourceFile, Path=(Validation.HasError)}" Value="true" />
                        </MultiDataTrigger.Conditions>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <Setter Property="IsEnabled" Value="false" />
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding ElementName=textBoxDestinationFolder, Path=(Validation.HasError)}" Value="true" />
                        </MultiDataTrigger.Conditions>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <Setter Property="IsEnabled" Value="false" />
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ElementName=radioButtonEncrypt, Path=(IsChecked)}" Value="true" />
                                <Condition Binding="{Binding ElementName=textBoxOutputFilename, Path=(Validation.HasError)}" Value="true" />
                            </MultiDataTrigger.Conditions>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <Setter Property="IsEnabled" Value="false" />
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ElementName=listBoxUsers, Path=(SelectedIndex)}" Value="-1" />
                                
                            </MultiDataTrigger.Conditions>
                        </MultiDataTrigger>
                    </Style.Triggers>
                </Style>
            </Button.Style>
        </Button>
        <ProgressBar x:Name="progressBarCrypt" Margin="10,464,10,0" Height="25" VerticalAlignment="Top" Value="{Binding CryptProgress}"/>
        <Label x:Name="labelApplicationStatus" Content="{Binding ApplicationStatus}" Margin="10,494,10,0" Height="27" VerticalAlignment="Top"/>

    </Grid>
</Window>
